import cv2
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
import joblib
import os
from pathlib import Path

# Configuration (you can modify these based on your dataset)
IMG_SIZE = 300  # Size of the image used for training
CLASSES = ["A", "B", "C", "D", "E"]  # Replace with your actual hand sign classes
SAMPLES_PER_CLASS = 50  # Number of images per class

# Create synthetic data or load your dataset here
def create_dummy_data():
    """Generates synthetic training data for your project"""
    Path("assets").mkdir(exist_ok=True)
    
    X = []
    y = []
    
    # Create synthetic images (grayscale, 300x300)
    for class_idx, class_name in enumerate(CLASSES):
        for _ in range(SAMPLES_PER_CLASS):
            # Generate a dummy image (just for example)
            img = np.zeros((IMG_SIZE, IMG_SIZE))
            
            # Add class-specific features (e.g., drawing a circle for class 'A')
            if class_name == "A":
                cv2.circle(img, (150,150), 100, 255, -1)
            elif class_name == "B":
                cv2.rectangle(img, (50,50), (250,250), 255, -1)
            # You can add more class-specific patterns
            
            X.append(img.flatten())  # Flatten image into 1D array
            y.append(class_name)
    
    return np.array(X), np.array(y)

# Train the model
X_train, y_train = create_dummy_data()  # Replace with your actual data loading
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)

# Save the model to model.pkl
joblib.dump(model, "assets/model.pkl")
print(f"Model trained with {len(X_train)} samples and saved as model.pkl")
